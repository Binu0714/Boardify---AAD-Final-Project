package org.example.bordifybackend.service.impl;

import lombok.RequiredArgsConstructor;
import org.example.bordifybackend.Dto.BookingRequestDTO;
import org.example.bordifybackend.entity.BookingReq;
import org.example.bordifybackend.entity.BookingStatus;
import org.example.bordifybackend.entity.Property;
import org.example.bordifybackend.entity.User;
import org.example.bordifybackend.repo.BookingRepo;
import org.example.bordifybackend.repo.NotificationRepo;
import org.example.bordifybackend.repo.PropertyRepo;
import org.example.bordifybackend.repo.UserRepo;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
public class BookingServiceImpl {
    private final UserRepo userRepo;
    private final PropertyRepo propertyRepo;
    private final BookingRepo bookingRepo;
    private final NotificationServiceImpl notificationService;
    private final NotificationRepo notificationRepo;

    @Transactional
    public void createBookingRequest(BookingRequestDTO requestDTO) {
        String username = SecurityContextHolder.getContext().getAuthentication().getName();
        User seeker = userRepo.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        Property property = propertyRepo.findById(requestDTO.getPropertyId())
                .orElseThrow(() -> new RuntimeException("Property not found"));

        User owner = property.getUser();

        if (seeker.equals(owner)) {
            throw new RuntimeException("You cannot book your own property");
        }

        BookingReq newBookingReq = BookingReq.builder()
                .status(BookingStatus.PENDING)
                .user(seeker)
                .property(property)
                .build();

        BookingReq savedReq = bookingRepo.save(newBookingReq);

        String messageToOwner = seeker.getUsername() + " has sent a booking request for your ad: '" + property.getTitle() + "'";

        notificationService.createNotification(seeker, owner, messageToOwner, savedReq);
    }

    @Transactional
    public void acceptBookingRequest(Long bookingId) {
        BookingReq acceptedRequest = bookingRepo.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Booking request not found"));

        Property property = acceptedRequest.getProperty();
        User owner = property.getUser();
        String username = SecurityContextHolder.getContext().getAuthentication().getName();

        User currentUser = userRepo.findByUsername(username).orElseThrow();

        if (!owner.equals(currentUser)) {
            throw new IllegalStateException("You are not authorized to accept requests for this property.");
        }

        notificationRepo.findByBookingReq_Id(acceptedRequest.getId())
                        .ifPresent(notification -> {
                            notification.setRead(true);
                            notificationRepo.save(notification);
                        });

        acceptedRequest.setStatus(BookingStatus.APPROVED);
        property.setAvailability(false);
        propertyRepo.save(property);

        List<BookingReq> otherPendingRequests = bookingRepo.findByProperty_PropertyIdAndStatusAndIdNot(
                property.getPropertyId(),
                BookingStatus.PENDING,
                acceptedRequest.getId()
        );

        if (!otherPendingRequests.isEmpty()) {
            otherPendingRequests.forEach(requestToDecline -> {
                String declineMessage = "Your request for '" + property.getTitle() + "' was declined as the property is now booked.";
                notificationService.createNotification(owner, requestToDecline.getUser(), declineMessage, requestToDecline);
            });

            bookingRepo.deleteAll(otherPendingRequests);
        }

        User seeker = acceptedRequest.getUser();
        String acceptanceMessage = "Your booking request for '" + property.getTitle() + "' has been ACCEPTED!";
        notificationService.createNotification(owner, seeker, acceptanceMessage, acceptedRequest);
    }

    @Transactional
    public void declineBookingRequest(long id) {
        BookingReq declinedRequest = bookingRepo.findById(id)
                .orElseThrow(() -> new RuntimeException("Booking request not found"));

        Property property = declinedRequest.getProperty();
        User owner = property.getUser();
        String username = SecurityContextHolder.getContext().getAuthentication().getName();

        User currentUser = userRepo.findByUsername(username).orElseThrow();

        if (!owner.equals(currentUser)) {
            throw new IllegalStateException("You are not authorized to decline requests for this property.");
        }

        notificationRepo.findByBookingReq_Id(declinedRequest.getId())
                .ifPresent(notification -> {
                    notification.setRead(true);
                    notificationRepo.save(notification);
                });

        declinedRequest.setStatus(BookingStatus.DECLINED);
        bookingRepo.save(declinedRequest);

        User seeker = declinedRequest.getUser();
        String declineMessage = "Unfortunately, your booking request for '" + property.getTitle() + "' was DECLINED.";
        notificationService.createNotification(owner, seeker, declineMessage, declinedRequest);

    }
}
